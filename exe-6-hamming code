def text_to_binary(text):
    """Convert a string of text to its binary representation."""
    return ''.join(format(ord(char), '08b') for char in text)

def binary_to_text(binary):
    """Convert binary string to text."""
    chars = [binary[i:i+8] for i in range(0, len(binary), 8)]
    return ''.join(chr(int(char, 2)) for char in chars)

def calculate_parity_bits(data_bits):
    """Calculate the number of parity bits required for the given data bits."""
    m = len(data_bits)
    r = 0
    while (2**r < m + r + 1):
        r += 1
    return r

def insert_parity_bits(data_bits, r):
    """Insert parity bits into the data bits."""
    hamming_code = ''
    j = 0
    k = 0
    for i in range(1, len(data_bits) + r + 1):
        if i == 2**j:
            hamming_code += '0'  # Placeholder for parity bit
            j += 1
        else:
            hamming_code += data_bits[k]
            k += 1
    return hamming_code

def calculate_parity_values(hamming_code, r):
    """Calculate parity values and insert them into the Hamming code."""
    hamming_code = list(hamming_code)
    for i in range(r):
        parity = 0
        for j in range(1, len(hamming_code) + 1):
            if j & (2**i) == (2**i):
                parity ^= int(hamming_code[j - 1])
        hamming_code[2**i - 1] = str(parity)
    return ''.join(hamming_code)

def detect_and_correct_error(hamming_code, r):
    """Detect and correct a single-bit error in the Hamming code."""
    hamming_code = list(hamming_code)
    error_pos = 0
    
    for i in range(r):
        parity = 0
        for j in range(1, len(hamming_code) + 1):
            if j & (2**i) == (2**i):
                parity ^= int(hamming_code[j - 1])
        error_pos += parity * (2**i)
    
    if error_pos > 0 and error_pos <= len(hamming_code):
        print(f"Error detected at position: {error_pos}")
        hamming_code[error_pos - 1] = '1' if hamming_code[error_pos - 1] == '0' else '0'
        print("Error corrected.")
    else:
        print("No error detected or error position out of range.")
    
    return ''.join(hamming_code)

def remove_parity_bits(hamming_code, r):
    """Remove parity bits from the Hamming code to retrieve the original data bits."""
    corrected_data = ''
    j = 0
    for i in range(1, len(hamming_code) + 1):
        if i != 2**j:
            corrected_data += hamming_code[i - 1]
        else:
            j += 1
    return corrected_data

def generate_hamming_code(text):
    """Generate Hamming code for a given text."""
    binary_data = text_to_binary(text)
    r = calculate_parity_bits(binary_data)
    hamming_code = insert_parity_bits(binary_data, r)
    hamming_code = calculate_parity_values(hamming_code, r)
    return hamming_code, r

def simulate_error(hamming_code, error_bit):
    """Simulate an error by flipping a bit at a specific position."""
    if 0 <= error_bit < len(hamming_code):
        hamming_code = list(hamming_code)
        hamming_code[error_bit] = '1' if hamming_code[error_bit] == '0' else '0'
        return ''.join(hamming_code)
    return hamming_code

def main():
    text_input = input("Enter the text you want to encode using Hamming code: ")

    # Generate Hamming code
    hamming_code, r = generate_hamming_code(text_input)
    print(f"Original Hamming Code: {hamming_code}")

    # Simulate an error if needed
    error_bit = int(input(f"Enter the bit position to introduce an error (0 to {len(hamming_code) - 1}), or -1 for no error: "))
    if error_bit != -1:
        hamming_code_with_error = simulate_error(hamming_code, error_bit)
        print(f"Transmitted Hamming Code with Error: {hamming_code_with_error}")
    else:
        hamming_code_with_error = hamming_code

    # Detect and correct the error
    corrected_hamming_code = detect_and_correct_error(hamming_code_with_error, r)
    
    # Remove parity bits to get the original data
    corrected_data_bits = remove_parity_bits(corrected_hamming_code, r)
    corrected_text = binary_to_text(corrected_data_bits)

    # Print the results
    print(f"Original Text: {text_input}")
    print(f"Corrected Text: {corrected_text}")
    print(f"Original Hamming Code: {hamming_code}")
    print(f"Corrected Hamming Code: {corrected_hamming_code}")

if __name__ == "__main__":
    main()
